/*
*  Provision into AWS cloud, using environment variables for config -- see https://aws.amazon.com/cli/ for
*  directions on setting up AWS_CONFIG_FILE, AWS_DEFAULT_REGION, and AWS_PROFILE  (aws configure)
*
*/
provider "aws" {
    region="ap-northeast-1"
}



/*
*
* Heavy lifting here... set up ingress and egress values (note that an ingress rule for github.com is included)
* Launch instance based on given AMI, yum update it, make sure it has wget and git, clone the project,
* put ansible on the server, use ansible to install jenkins via a public ansible role in galaxy
*/
resource "aws_security_group" "ssh_sg" {
  name = "ssh-sg"
  description = "Allow ssh and jenkins port" 

  ingress {
      from_port = 22
      to_port = 22
      protocol = "TCP"
      cidr_blocks = ["INGRESSBLOCK","SELFCIDRS"]
  }

  ingress {
      from_port = 8080
      to_port = 8081
      protocol = "TCP"
      cidr_blocks = [
	"INGRESSBLOCK",
	"192.30.252.0/22",
        "SELFCIDRS"
     ]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}

/*
* run jenkins provisioning scripts
*/
resource "aws_instance" "jenkinsmaster" {
    ami = "ami-900ff7f1"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "JenkinsMaster"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.ssh_sg.name}"]


    provisioner "remote-exec" {
        script="setupJenkinsMaster.sh"
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
        }
    }

    ebs_block_device = {
        device_name="/dev/xvdh"
        snapshot_id="snap-ab0adb44"
        delete_on_termination="true"
        volume_type="gp2"
    }
}


output "jenkinsmaster_public_ip" {
    value = "${aws_instance.jenkinsmaster.public_ip}"
}

output "buildserver_public_ip" {
    value = "${aws_instance.buildserver.public_ip}"
}

output "targetserver_public_ip" {
    value = "${aws_instance.targetserver.public_ip}"
}

resource "aws_security_group" "ssh_and_8080" {
  name = "ssh-8080"
  description = "Allow ssh and 8080"

  ingress {
      from_port = 22
      to_port = 22
      protocol = "TCP"
      cidr_blocks = ["INGRESSBLOCK","SELFCIDRS"]
  }

  ingress {
      from_port = 8080
      to_port = 8080
      protocol = "TCP"
      cidr_blocks = [
      	"INGRESSBLOCK","SELFCIDRS"
      ]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}


/*
* Bring up build server
*/
resource "aws_instance" "buildserver" {
    ami = "ami-950ef6f4"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "BuildServer"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.ssh_and_8080.name}"]


    provisioner "remote-exec" {
        script = "setupBuildServer.sh"
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
        }
    }
    ebs_block_device = {
        device_name="/dev/xvdh"
        snapshot_id="snap-ab0adb44"
        delete_on_termination="true"
        volume_type="gp2"
    }

}


/*
* Bring up target server
*/
resource "aws_instance" "targetserver" {
    ami = "ami-5201f933"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "TargetServer"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.ssh_and_8080.name}"]


    provisioner "remote-exec" {
        script="setupTargetServer.sh"
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
        }
    }
    ebs_block_device = {
        device_name="/dev/xvdh"
        snapshot_id="snap-ab0adb44"
        delete_on_termination="true"
        volume_type="gp2"
}

}



/*
* link up Github webhook to this instance of jenkins
*/
resource "null_resource" "nlr1" {
    provisioner "local-exec" {         
        command = "./updateGithubWebhook.sh ${aws_instance.jenkinsmaster.public_dns} GITHUB_REPONAME GITHUB_USER GITHUB_PWD"
    }
}


/*
* Generate a public/private key pair locally
*/
resource "null_resource" "nlr2" {
    depends_on=["null_resource.nlr1"]

    provisioner "local-exec" {
        command = "ssh-keygen -f ./id_rsa -N '' -t rsa -b 4096 -C 'jrounceville@hotmail.com' ; ssh-keygen -y -f ./id_rsa > id_rsa.pub"
    }
}

/*
* copy the private key to the jenkins server
*/
resource "null_resource" "nlr3" {
    depends_on=["null_resource.nlr2"]

    provisioner "file" {
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
        source = "./id_rsa"
        destination = "/home/ec2-user/id_rsa"
    }

}


/*
* put the private key in jenkins' key store and change its ownership
*/
resource "null_resource" "nlr4" {
    depends_on=["null_resource.nlr3"]

    provisioner "remote-exec" {
        script="pushPrivateKeyToJenkins.sh"
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
    }
}


/*
* push the public key to jenkins' delivery keys
*/
resource "null_resource" "nlr5" {
    depends_on=["null_resource.nlr4"]

    provisioner "local-exec" {
        command = "./pushPublicKeyToGithub.sh GITHUB_REPONAME GITHUB_USER GITHUB_PWD ${aws_instance.jenkinsmaster.public_dns}"
    }
}


/* 
* update /etc/hosts on buildserver
*/
resource "null_resource" "hosts_for_buildserver" {

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/.rounceville.com/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/targetserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.targetserver.private_ip} target.rounceville.com >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.rounceville.com >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.rounceville.com >> /etc/hosts\"",
        "sudo hostname -b build.rounceville.com"
        ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.buildserver.public_dns}"
        }
    }
}


/*
* update /etc/hosts on jenkinsmaster
*/
resource "null_resource" "hosts_for_jenkinsmaster" {

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/.rounceville.com/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/targetserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.targetserver.private_ip} target.rounceville.com >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.rounceville.com >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.rounceville.com >> /etc/hosts\"",
        "sudo hostname -b jenkins.rounceville.com"
        ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
    }
}


/*
* update /etc/hosts on targetserver
*/
resource "null_resource" "hosts_for_targetserver" {

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/.rounceville.com/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/targetserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.targetserver.private_ip} target.rounceville.com >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.rounceville.com >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.rounceville.com >> /etc/hosts\"",
        "sudo hostname -b target.rounceville.com" 
       ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.targetserver.public_dns}"
        }
    }
}

resource "null_resource" "turn_on_target_slave_agent" {
     depends_on=["null_resource.hosts_for_jenkinsmaster",
                 "null_resource.hosts_for_targetserver",
                 "null_resource.hosts_for_buildserver",
                 "aws_instance.jenkinsmaster",
                 "aws_instance.targetserver",
                 "aws_instance.buildserver"]
   
     provisioner "remote-exec" {
         inline = [
              "cd ~",
              "nohup java -jar /perm/swarm-client-jar-with-dependencies.jar -deleteExistingClients -description Target_deployment_server -disableClientsUniqueId -labels target -master http://jenkins.rounceville.com:8080 -username admin -password admin &",
              "sleep 2"
         ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.targetserver.public_dns}"
        }
     }
}

resource "null_resource" "turn_on_build_slave_agent" {
     depends_on=["null_resource.hosts_for_jenkinsmaster",
                 "null_resource.hosts_for_targetserver",
                 "null_resource.hosts_for_buildserver",
                 "aws_instance.jenkinsmaster",
                 "aws_instance.targetserver",
                 "aws_instance.buildserver"]
   
     provisioner "remote-exec" {
         inline = [
              "cd ~",
              "nohup java -jar /perm/swarm-client-jar-with-dependencies.jar -deleteExistingClients -description Java_build_server -disableClientsUniqueId -labels build -master http://jenkins.rounceville.com:8080 -username admin -password admin &",
              "sleep 2"
         ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.buildserver.public_dns}"
        }
     }
}
