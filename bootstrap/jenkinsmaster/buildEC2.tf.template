/*
*  Provision into AWS cloud, using environment variables for config -- see https://aws.amazon.com/cli/ for
*  directions on setting up AWS_CONFIG_FILE, AWS_DEFAULT_REGION, and AWS_PROFILE  (aws configure)
*
*/
provider "aws" {
    region="ap-northeast-1"
}



/*
*
* Heavy lifting here... set up ingress and egress values (note that an ingress rule for github.com is included)
* Launch instance based on given AMI, yum update it, make sure it has wget and git, clone the project,
* put ansible on the server, use ansible to install jenkins via a public ansible role in galaxy
*/
resource "aws_security_group" "ssh_sg" {
  name = "ssh-sg"
  description = "Allow ssh and jenkins" 

  ingress {
      from_port = 22
      to_port = 22
      protocol = "TCP"
      cidr_blocks = ["INGRESSBLOCK"]
  }

  ingress {
      from_port = 8080
      to_port = 8080
      protocol = "TCP"
      cidr_blocks = ["INGRESSBLOCK","192.30.252.0/22"]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}

/*
* run scripts
*/
resource "aws_instance" "jenkinsmaster" {
    ami = "ami-43c43d22"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "JenkinsMaster"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.ssh_sg.name}"]


    provisioner "remote-exec" {
        inline = [
            "sudo yum -y update",
            "sudo yum -y install wget",
            "sudo yum -y install git",
            "sudo git clone https://github.com/calphool/devopskata.git",
            "sudo ./devopskata/bootstrap/jenkinsmaster/provisionAnsible.sh",
        ]
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
        }
    }
}


/*
* link up Github webhook to this instance of jenkins
*/
resource "null_resource" "nlr1" {
    provisioner "local-exec" {         
        command = "./updateGithubWebhook.sh ${aws_instance.jenkinsmaster.public_dns} GITHUB_REPONAME GITHUB_USER GITHUB_PWD"
    }
}


/*
* Generate a public/private key pair locally
*/
resource "null_resource" "nlr2" {
    depends_on=["null_resource.nlr1"]

    provisioner "local-exec" {
        command = "ssh-keygen -f ./id_rsa -N '' -t rsa -b 4096 -C 'jrounceville@hotmail.com' ; ssh-keygen -y -f ./id_rsa > id_rsa.pub"
    }
}

/*
* copy the private key to the jenkins server
*/
resource "null_resource" "nlr3" {
    depends_on=["null_resource.nlr2"]

    provisioner "file" {
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
        source = "./id_rsa"
        destination = "/home/ec2-user/id_rsa"
    }

}


/*
* put the private key in jenkins' key store and change its ownership
*/
resource "null_resource" "nlr4" {
    depends_on=["null_resource.nlr3"]

    provisioner "remote-exec" {
        inline = [
             "sudo mkdir -p /var/lib/jenkins/.ssh",
             "sudo chmod 700 /var/lib/jenkins/.ssh",
             "sudo chown jenkins:jenkins /var/lib/jenkins/.ssh",
             "sudo mv /home/ec2-user/id_rsa /var/lib/jenkins/.ssh/id_rsa",
             "sudo chmod 600 /var/lib/jenkins/.ssh/id_rsa",
             "sudo chown jenkins:jenkins /var/lib/jenkins/.ssh/id_rsa"
        ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
    }
}


/*
* push the public key to jenkins' delivery keys
*/
resource "null_resource" "nlr5" {
    depends_on=["null_resource.nlr4"]

    provisioner "local-exec" {
        command = "./pushPublicKeyToGithub.sh GITHUB_REPONAME GITHUB_USER GITHUB_PWD ${aws_instance.jenkinsmaster.public_dns}"
    }
}
