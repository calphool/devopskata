/*
*  Provision into AWS cloud, using environment variables for config -- see https://aws.amazon.com/cli/ for
*  directions on setting up AWS_CONFIG_FILE, AWS_DEFAULT_REGION, and AWS_PROFILE  (aws configure)
*
*/
provider "aws" {
    region="ap-northeast-1"
}



/*
*
* Heavy lifting here... set up ingress and egress values (note that an ingress rule for github.com is included)
* Launch instance based on given AMI, yum update it, make sure it has wget and git, clone the project,
* put ansible on the server, use ansible to install jenkins via a public ansible role in galaxy
*/
resource "aws_security_group" "jenkins_securitygroup" {
  name = "ssh-jenkins-sg"
  description = "Allow ssh and jenkins port" 

  ingress {
      from_port = 22
      to_port = 22
      protocol = "TCP"
      cidr_blocks = ["INGRESSBLOCK","SELFCIDRS"]
  }

  ingress {
      from_port = 8080
      to_port = 8081
      protocol = "TCP"
      cidr_blocks = [
	"INGRESSBLOCK",
	"192.30.252.0/22",
        "SELFCIDRS"
     ]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "aws_security_group" "slave_securitygroup" {
  name = "slave-securitygroup"
  description = "Allow ssh and 8080"

  ingress {
      from_port = 22
      to_port = 22
      protocol = "TCP"
      cidr_blocks = ["INGRESSBLOCK","SELFCIDRS"]
  }

  ingress {
      from_port = 8080
      to_port = 8080
      protocol = "TCP"
      cidr_blocks = [
      	"INGRESSBLOCK","SELFCIDRS"
      ]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "aws_security_group" "db1" {
  name = "db-securitygroup1"
  description = "Allow 3306"

  ingress {
      from_port = 3306
      to_port = 3306
      protocol = "TCP"
      cidr_blocks = [
      	"INGRESSBLOCK","SELFCIDRS"
      ]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "aws_security_group" "db2" {
  name = "db-securitygroup2"
  description = "Allow 3306"

  ingress {
      from_port = 3306
      to_port = 3306
      protocol = "TCP"
      cidr_blocks = [
      	"INGRESSBLOCK","SELFCIDRS"
      ]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}



/*
* Bring up build server
*/
resource "aws_instance" "buildserver" {

    ami = "BUILDSERVERAMI"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "BuildServer"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.slave_securitygroup.name}"]

}


/*
* Bring up qa server
*/
resource "aws_instance" "qaserver" {

    ami = "QASERVERAMI"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "QAServer"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.slave_securitygroup.name}"]

}


resource "aws_instance" "prodserver" {

    ami = "PRODSERVERAMI"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "ProdServer"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.slave_securitygroup.name}"]

}


resource "null_resource" "nrgenkey" {
    provisioner "local-exec" {
        command="echo $(crudini --get ~/.aws/credentials $AWS_PROFILE aws_access_key_id):$(crudini --get ~/.aws/credentials $AWS_PROFILE aws_secret_access_key) | openssl enc -aes-128-cbc -a -salt -pass pass:wtf > p"
    }
}



resource "aws_db_instance" "qadatabase" {
  allocated_storage    = 5
  engine               = "mariadb"
  engine_version       = "10.1"
  instance_class       = "db.t2.micro"
  storage_type         = "standard"
  skip_final_snapshot  = "true"
  availability_zone    = "ap-northeast-1a"
  backup_retention_period = 0
  identifier           = "qadb"
  username             = "qauser"
  password             = "qapassword"
  multi_az             = "false"
  publicly_accessible  = "false"
  apply_immediately    = "true"
  vpc_security_group_ids  = ["${aws_security_group.db1.id}"]
}

resource "aws_db_instance" "proddatabase" {
  allocated_storage    = 5
  engine               = "mariadb"
  engine_version       = "10.1"
  instance_class       = "db.t2.micro"
  storage_type         = "standard"
  skip_final_snapshot  = "true"
  availability_zone    = "ap-northeast-1a"
  backup_retention_period = 0
  identifier           = "proddb"
  username             = "produser"
  password             = "prodpassword"
  multi_az             = "false"
  publicly_accessible  = "false"
  apply_immediately    = "true"
  vpc_security_group_ids  = ["${aws_security_group.db2.id}"]
}


resource "null_resource" "create_qa_db_endpoint_file" {
   depends_on=["aws_db_instance.qadatabase","aws_instance.qaserver"]

    provisioner "local-exec" {
        command="echo ${aws_db_instance.qadatabase.endpoint} > qaendpoint.txt"
    }
    provisioner "local-exec" {
        command="echo ${aws_db_instance.qadatabase.address} > qaaddress.txt"
    }
}

resource "null_resource" "push_dbname_to_qa" {
   depends_on=["null_resource.create_qa_db_endpoint_file"]

   provisioner "file" {
        source="qaendpoint.txt"
        destination="/home/ec2-user/dbendpoint.txt"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.qaserver.public_dns}"
        }    
    }
   provisioner "file" {
        source="qaaddress.txt"
        destination="/home/ec2-user/dbaddress.txt"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.qaserver.public_dns}"
        }    
    }
}

resource "null_resource" "cleanup_qa_db_endpoint_file" {
   depends_on=["null_resource.push_dbname_to_qa"]

    provisioner "local-exec" {
        command="rm qaendpoint.txt"
    }
    provisioner "local-exec" {
        command="rm qaaddress.txt"
    }
}






resource "null_resource" "create_prod_db_endpoint_file" {
   depends_on=["aws_db_instance.proddatabase","aws_instance.prodserver"]

    provisioner "local-exec" {
        command="echo ${aws_db_instance.proddatabase.endpoint} > prodendpoint.txt"
    }
    provisioner "local-exec" {
        command="echo ${aws_db_instance.proddatabase.address} > prodaddress.txt"
    }
}

resource "null_resource" "push_dbname_to_prod" {
   depends_on=["null_resource.create_prod_db_endpoint_file"]

   provisioner "file" {
        source="prodendpoint.txt"
        destination="/home/ec2-user/dbendpoint.txt"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.prodserver.public_dns}"
        }    
    }
   provisioner "file" {
        source="prodaddress.txt"
        destination="/home/ec2-user/dbaddress.txt"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.prodserver.public_dns}"
        }    
    }
}

resource "null_resource" "cleanup_prod_db_endpoint_file" {
   depends_on=["null_resource.push_dbname_to_prod"]

    provisioner "local-exec" {
        command="rm prodendpoint.txt"
    }
    provisioner "local-exec" {
        command="rm prodaddress.txt"
    }
}








/*
* run jenkins provisioning scripts
*/
resource "aws_instance" "jenkinsmaster" {
    depends_on=["null_resource.nrgenkey"]

    ami = "JENKINSAMI"
    instance_type = "t2.micro"
    key_name="devops_1"
    tags {
        name = "JenkinsMaster"
    }
    connection {
        user="${connectionuser}"
        private_key="CONNECTIONKEYFILE"
    }
    security_groups = ["${aws_security_group.jenkins_securitygroup.name}"]
}




resource "null_resource" "pushkey_to_jenkins" {
   depends_on=["aws_instance.jenkinsmaster","null_resource.nrgenkey"]
 
   provisioner "file" {
        source="p"
        destination="/home/ec2-user/p"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }    
    }
}


resource "null_resource" "pushkey_to_qa" {
   depends_on=["aws_instance.qaserver","null_resource.nrgenkey"]
 
   provisioner "file" {
        source="p"
        destination="/home/ec2-user/p"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.qaserver.public_dns}"
        }    
    }
}


resource "null_resource" "pushkey_to_prod" {
   depends_on=["aws_instance.prodserver","null_resource.nrgenkey"]
 
   provisioner "file" {
        source="p"
        destination="/home/ec2-user/p"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.prodserver.public_dns}"
        }    
    }
}


resource "null_resource" "pushkey_to_build" {
   depends_on=["aws_instance.buildserver","null_resource.nrgenkey"]
 
   provisioner "file" {
        source="p"
        destination="/home/ec2-user/p"

        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.buildserver.public_dns}"
        }    
    }
}

resource "null_resource" "rmkey" {
    depends_on=["null_resource.pushkey_to_jenkins","null_resource.pushkey_to_qa","null_resource.pushkey_to_build","null_resource.pushkey_to_prod"]

    provisioner "local-exec" {
        command="rm p"
    }
}



resource "null_resource" "jenkinssetup" {
   depends_on=["null_resource.pushkey_to_jenkins"]

   provisioner "remote-exec" {
        inline= [
		"cd /home/ec2-user", 
		"sudo yum -y install git",
		"sudo rm -rf ~/devopskata 2> /dev/null", 
		"sudo git clone https://github.com/calphool/devopskata.git",
		"cd /home/ec2-user/devopskata/bootstrap/jenkinsmaster",
		"./setupJenkinsMaster.sh S3BUCKETNAME"]
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host="${aws_instance.jenkinsmaster.public_dns}"
        }
    }
}

resource "null_resource" "qasetup" {
   depends_on=["null_resource.pushkey_to_qa"]

   provisioner "remote-exec" {
        inline=[
		"cd /home/ec2-user", 
		"sudo yum -y install git",
		"sudo rm -rf ~/devopskata 2> /dev/null", 
		"sudo git clone https://github.com/calphool/devopskata.git",
		"cd /home/ec2-user/devopskata/bootstrap/qaserver",
		"./setupQAServer.sh S3BUCKETNAME"]
     
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host="${aws_instance.qaserver.public_dns}"
        }
    }
}


resource "null_resource" "prodsetup" {
   depends_on=["null_resource.pushkey_to_prod"]

   provisioner "remote-exec" {
        inline=[
		"cd /home/ec2-user", 
		"sudo yum -y install git",
		"sudo rm -rf ~/devopskata 2> /dev/null", 
		"sudo git clone https://github.com/calphool/devopskata.git",
		"cd /home/ec2-user/devopskata/bootstrap/prodserver",
		"./setupProdServer.sh S3BUCKETNAME"]
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host="${aws_instance.prodserver.public_dns}"
        }
    }
}


resource "null_resource" "buildsetup" {
   depends_on=["null_resource.pushkey_to_build"]


   provisioner "remote-exec" {
        inline=[
		"cd /home/ec2-user", 
		"sudo yum -y install git",
		"sudo rm -rf ~/devopskata 2> /dev/null", 
		"sudo git clone https://github.com/calphool/devopskata.git",
		"cd /home/ec2-user/devopskata/bootstrap/buildserver",
		"./setupBuildServer.sh S3BUCKETNAME"]  
        connection {
            type = "ssh"
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host="${aws_instance.buildserver.public_dns}"
        }
    }
}


/*
* link up Github webhook to this instance of jenkins
*/
resource "null_resource" "nlr1_updatewebhook" {
    
    provisioner "local-exec" {         
        command = "./updateGithubWebhook.sh ${aws_instance.jenkinsmaster.public_dns} GITHUB_REPONAME GITHUB_USER GITHUB_PWD"
    }
}


/*
* Generate a public/private key pair locally
*/
resource "null_resource" "nlr2_genkeylocally" {

    provisioner "local-exec" {
        command = "ssh-keygen -f ./id_rsa -N '' -t rsa -b 4096 -C 'somekey@hotmail.com' ; ssh-keygen -y -f ./id_rsa > id_rsa.pub"
    }
}

/*
* copy the private key to the jenkins server
*/
resource "null_resource" "nlr3_pushprivkeytojenkins" {
    depends_on=["null_resource.nlr2_genkeylocally"]

    provisioner "file" {
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
        source = "./id_rsa"
        destination = "/home/ec2-user/id_rsa"
    }
}


/*
* put the private key in jenkins' key store and change its ownership
*/
resource "null_resource" "nlr4_chmodkey" {
    depends_on=["null_resource.nlr3_pushprivkeytojenkins"]

    provisioner "remote-exec" {
        script="ChmodPrivateKey.sh"
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
    }
}


/*
* push the public key to jenkins' delivery keys
*/
resource "null_resource" "nlr5_pushkey_to_github" {
    depends_on=["null_resource.nlr4_chmodkey"]

    provisioner "local-exec" {
        command = "./pushPublicKeyToGithub.sh GITHUB_REPONAME GITHUB_USER GITHUB_PWD ${aws_instance.jenkinsmaster.public_dns}"
    }
}


/* 
* update /etc/hosts on buildserver
*/
resource "null_resource" "hosts_for_buildserver" {
    depends_on=["aws_instance.buildserver", "aws_instance.qaserver", "aws_instance.jenkinsmaster", "aws_instance.prodserver"]

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/CUSTOMDOMAIN/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/qaserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/prodserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.qaserver.private_ip} qa.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.prodserver.private_ip} prod.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo hostnamectl set-hostname build.CUSTOMDOMAIN"
        ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.buildserver.public_dns}"
        }
    }
}


/*
* update /etc/hosts on jenkinsmaster
*/
resource "null_resource" "hosts_for_jenkinsmaster" {
    depends_on=["aws_instance.buildserver", "aws_instance.qaserver", "aws_instance.jenkinsmaster", "aws_instance.prodserver"]

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/CUSTOMDOMAIN/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/qaserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/prodserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.qaserver.private_ip} qa.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.prodserver.private_ip} prod.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo hostnamectl set-hostname jenkins.CUSTOMDOMAIN"
        ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.jenkinsmaster.public_dns}"
        }
    }
}


/*
* update /etc/hosts on qaserver
*/
resource "null_resource" "hosts_for_qaserver" {
    depends_on=["aws_instance.buildserver", "aws_instance.qaserver", "aws_instance.jenkinsmaster", "aws_instance.prodserver"]

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/CUSTOMDOMAIN/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/qaserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/prodserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.qaserver.private_ip} qa.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.prodserver.private_ip} prod.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo hostnamectl set-hostname qa.CUSTOMDOMAIN" 
       ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.qaserver.public_dns}"
        }
    }
}



resource "null_resource" "hosts_for_prodserver" {
    depends_on=["aws_instance.buildserver", "aws_instance.qaserver", "aws_instance.jenkinsmaster", "aws_instance.prodserver"]

    provisioner "remote-exec" {
        inline = [
        "cat /etc/hosts | sudo awk '!/CUSTOMDOMAIN/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/qaserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/prodserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/buildserver/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "cat /etc/hosts | sudo awk '!/jenkinsmaster/' > ~/hosts2 ; sudo mv ~/hosts2 /etc/hosts",
        "sudo -- sh -c \"echo ${aws_instance.qaserver.private_ip} qa.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.prodserver.private_ip} prod.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.buildserver.private_ip} build.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo -- sh -c \"echo ${aws_instance.jenkinsmaster.private_ip} jenkins.CUSTOMDOMAIN >> /etc/hosts\"",
        "sudo hostnamectl set-hostname prod.CUSTOMDOMAIN" 
       ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.prodserver.public_dns}"
        }
    }
}

resource "null_resource" "turn_on_qa_slave_agent" {
     depends_on=["null_resource.hosts_for_jenkinsmaster",
                 "null_resource.hosts_for_qaserver",
                 "null_resource.hosts_for_prodserver",
                 "null_resource.hosts_for_buildserver",
                 "null_resource.jenkinssetup",
                 "null_resource.qasetup"]
   
     provisioner "remote-exec" {
         inline = [
              "cd ~",
              "sudo nohup java -jar /home/ec2-user/s3/swarm-client-jar-with-dependencies.jar -deleteExistingClients -description QA_deployment_server -disableClientsUniqueId -labels qa -master http://jenkins.CUSTOMDOMAIN:8080 -username admin -password admin &",
              "sleep 2"
         ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.qaserver.public_dns}"
        }
     }
}


resource "null_resource" "turn_on_prod_slave_agent" {
     depends_on=["null_resource.hosts_for_jenkinsmaster",
                 "null_resource.hosts_for_qaserver",
                 "null_resource.hosts_for_prodserver",
                 "null_resource.hosts_for_buildserver",
                 "null_resource.jenkinssetup",
                 "null_resource.prodsetup"]
   
     provisioner "remote-exec" {
         inline = [
              "cd ~",
              "sudo nohup java -jar /home/ec2-user/s3/swarm-client-jar-with-dependencies.jar -deleteExistingClients -description prod_server -disableClientsUniqueId -labels prod -master http://jenkins.CUSTOMDOMAIN:8080 -username admin -password admin &",
              "sleep 2"
         ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.prodserver.public_dns}"
        }
     }
}

resource "null_resource" "turn_on_build_slave_agent" {
     depends_on=["null_resource.hosts_for_jenkinsmaster",
                 "null_resource.hosts_for_qaserver",
                 "null_resource.hosts_for_prodserver",
                 "null_resource.hosts_for_buildserver",
                 "null_resource.jenkinssetup",
                 "null_resource.buildsetup"]
   
     provisioner "remote-exec" {
         inline = [
              "cd ~",
              "sudo nohup java -jar /home/ec2-user/s3/swarm-client-jar-with-dependencies.jar -deleteExistingClients -description Java_build_server -disableClientsUniqueId -labels build -master http://jenkins.CUSTOMDOMAIN:8080 -username admin -password admin &",
              "sleep 2"
         ]
        connection {
            user = "ec2-user"
            private_key="CONNECTIONKEYFILE"
            host = "${aws_instance.buildserver.public_dns}"
        }
     }
}




output "jenkinsmaster_public_ip" {
    value = "${aws_instance.jenkinsmaster.public_ip}"
}

output "buildserver_public_ip" {
    value = "${aws_instance.buildserver.public_ip}"
}

output "qaserver_public_ip" {
    value = "${aws_instance.qaserver.public_ip}"
}

output "prodserver_public_ip" {
    value = "${aws_instance.prodserver.public_ip}"
}

output "qadb_address" { 
    value = "${aws_db_instance.qadatabase.address}"
}

output "proddb_address" {
    value = "${aws_db_instance.proddatabase.address}"   
}

